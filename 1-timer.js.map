{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from 'izitoast';\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\nconst startBtn = document.querySelector('button[data-start]');\nconst datePicker = document.querySelector('#datetime-picker');\nlet userSelectedDate = null;\n\nflatpickr(datePicker, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    userSelectedDate = selectedDates[0];\n\n    if (userSelectedDate < new Date()) {\n    iziToast.error({\n    title: 'Please choose a date in the future',\n    position: 'topLeft',\n    });\n      \n      startBtn.disabled = true;\n    } else {\n      startBtn.disabled = false;\n      };\n    },\n  });\n\nstartBtn.disabled = true;\n\nstartBtn.addEventListener('click', handleStartTimer);\n\nfunction handleStartTimer() {\n  \n  const intervalID = setInterval(() => {\n    const diff = userSelectedDate - Date.now();\n    const { days, hours, minutes, seconds } = convertMs(diff);\n    daysEl.textContent = addLeadingZero(days);\n    hoursEl.textContent = addLeadingZero(hours);\n    minutesEl.textContent = addLeadingZero(minutes);\n    secondsEl.textContent = addLeadingZero(seconds);\n\n    if (diff < 1000) {\n      clearInterval(intervalID);\n      datePicker.disabled = false;    \n    }\n  }, 1000);\n\n  startBtn.disabled = true;\n  datePicker.disabled = true;\n}\n\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n"],"names":["daysEl","hoursEl","minutesEl","secondsEl","startBtn","datePicker","userSelectedDate","flatpickr","selectedDates","iziToast","handleStartTimer","intervalID","diff","days","hours","minutes","seconds","convertMs","addLeadingZero","value","ms"],"mappings":"0IAMA,MAAMA,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEnDC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAa,SAAS,cAAc,kBAAkB,EAC5D,IAAIC,EAAmB,KAEvBC,EAAUF,EAAY,CACpB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQG,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAC5BF,EAAmBE,EAAc,CAAC,EAE9BF,EAAmB,IAAI,MAC3BG,EAAS,MAAM,CACf,MAAO,qCACP,SAAU,SACd,CAAK,EAECL,EAAS,SAAW,IAEpBA,EAAS,SAAW,EAErB,CACL,CAAG,EAEHA,EAAS,SAAW,GAEpBA,EAAS,iBAAiB,QAASM,CAAgB,EAEnD,SAASA,GAAmB,CAE1B,MAAMC,EAAa,YAAY,IAAM,CACnC,MAAMC,EAAON,EAAmB,KAAK,IAAG,EAClC,CAAE,KAAAO,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAI,EACxDZ,EAAO,YAAckB,EAAeL,CAAI,EACxCZ,EAAQ,YAAciB,EAAeJ,CAAK,EAC1CZ,EAAU,YAAcgB,EAAeH,CAAO,EAC9CZ,EAAU,YAAce,EAAeF,CAAO,EAE1CJ,EAAO,MACT,cAAcD,CAAU,EACxBN,EAAW,SAAW,GAEzB,EAAE,GAAI,EAEPD,EAAS,SAAW,GACpBC,EAAW,SAAW,EACxB,CAGA,SAASa,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAGA,SAASF,EAAUG,EAAI,CAQrB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAE1BN,EAAQ,KAAK,MAAOM,EAAK,MAAO,IAAI,EAEpCL,EAAU,KAAK,MAAQK,EAAK,MAAO,KAAQ,GAAM,EAEjDJ,EAAU,KAAK,MAASI,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}